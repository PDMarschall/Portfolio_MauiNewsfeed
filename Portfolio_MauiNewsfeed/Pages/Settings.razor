@page "/settings"
@using Portfolio_MauiNewsfeed.Filtering;
@using System.Text.Json;
@using Portfolio_MauiNewsfeed.Services;
@inject NewsfeedFilter newsfeedFilter
@inject FilterService filterService

<h3>Settings</h3>
<div class="card settings-card">
    <br>
    <h4>
        Filter Settings
    </h4>
    <br />
    <div>
        <br />
        <div class="card-text d-flex justify-content-around">
            Toggle Newsfeed Filtering <ToggleSwitch Value="@Preferences.Get("EnableFilter", false)" ValueChanged="ToggleFilter"></ToggleSwitch>
        </div>
        <div class="@(Preferences.Get("EnableFilter", false) == false ? "d-none" : "d-block")">
            <br />
            @if (NewsfeedFilterCollection != null)
            {
                foreach (NewsfeedFilter filter in NewsfeedFilterCollection)
                {
                    <NewsfeedFilterItem Filter="filter" OnSelectFilter="SetFilter" OnDeleteFilter="DeleteFilter" OnEditFilter="EditFilter" />
                }
            }
            <div>
                <button type="button" class="btn btn-primary" @onclick="AddNewFilter">Add New Filter</button>
            </div>
        </div>
    </div>
</div>

@code {

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    public IEnumerable<NewsfeedFilter> NewsfeedFilterCollection { get; set; }

    protected override void OnInitialized()
    {
        NewsfeedFilterCollection = filterService.GetAllNewsfeedFilters();
        string activeFilterTitle = Preferences.Get("ActiveFilter", "None");

        if (activeFilterTitle != "None")
        {
            newsfeedFilter.CopyFilterValues(NewsfeedFilterCollection.Where(x => x.Title == activeFilterTitle).FirstOrDefault());
        }

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        NewsfeedFilterCollection = filterService.GetAllNewsfeedFilters();
        base.OnParametersSet();
    }

    public void ToggleFilter(bool toggle)
    {
        Preferences.Set("EnableFilter", toggle);
    }

    public void SetFilter(NewsfeedFilter filter)
    {
        newsfeedFilter.CopyFilterValues(filter);
    }

    public async Task AddNewFilter()
    {
        IModalReference filterModal = Modal.Show<AddNewsfeedFilter>("Add New Filter");
        ModalResult result = await filterModal.Result;

        if (result.Confirmed)
        {
            NewsfeedFilter newFilter = (NewsfeedFilter)result.Data;
            filterService.SaveNewsfeedFilter(newFilter);
            OnParametersSet();
        }
    }

    public void DeleteFilter(NewsfeedFilter filter)
    {
        filterService.DeleteFilter(filter);
        OnParametersSet();
    }

    public async Task EditFilter(NewsfeedFilter filter)
    {
        ModalParameters data = new ModalParameters().Add(nameof(AddNewsfeedFilter.Filter), filter);
        IModalReference filterModal = Modal.Show<AddNewsfeedFilter>("Edit Filter", data);
        ModalResult result = await filterModal.Result;

        if (result.Confirmed)
        {
            NewsfeedFilter newFilter = (NewsfeedFilter)result.Data;
            filterService.SaveNewsfeedFilter(newFilter);
            OnParametersSet();
        }
    }
}
