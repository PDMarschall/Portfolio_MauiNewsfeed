@page "/"
@using Portfolio_MauiNewsfeed.Filtering;
@using Portfolio_MauiNewsfeed.Services;
@using System.Diagnostics;
@inject NewsfeedFilter newsfeedFilter
@inject IAppDataService<NewsfeedFilter> filterService

<TabControl>
    <TabPage Text="Seneste Nyt">
        <br />
        <Newsfeed FeedUrl="https://www.dr.dk/nyheder/service/feeds/senestenyt" IsFiltered="_enableFilter" Whitelist="_whitelist" Blacklist="_blacklist" />
    </TabPage>
    <TabPage Text="Indland">
        <br />
        <Newsfeed FeedUrl="https://www.dr.dk/nyheder/service/feeds/indland" IsFiltered="_enableFilter" Whitelist="_whitelist" Blacklist="_blacklist" />
    </TabPage>
    <TabPage Text="Udland">
        <br />
        <Newsfeed FeedUrl="https://www.dr.dk/nyheder/service/feeds/udland" IsFiltered="_enableFilter" Whitelist="_whitelist" Blacklist="_blacklist" />
    </TabPage>
    <TabPage Text="Penge">
        <br />
        <Newsfeed FeedUrl="https://www.dr.dk/nyheder/service/feeds/penge" IsFiltered="_enableFilter" Whitelist="_whitelist" Blacklist="_blacklist" />
    </TabPage>
</TabControl>

@code {

    private bool _enableFilter;
    private List<string> _whitelist { get; set; }
    private List<string> _blacklist { get; set; }

    protected async override Task OnInitializedAsync()
    {
        _whitelist ??= new List<string>();
        _blacklist ??= new List<string>();

        var filters = await filterService.GetAllAsync();
        string activeFilterTitle = Preferences.Get("ActiveFilter", "None");

        if (activeFilterTitle != "None")
        {
            var activeFilter = filters.Where(x => x.Title == activeFilterTitle).FirstOrDefault();
            if (activeFilter != null)
                newsfeedFilter.CopyFilterValues(activeFilter);
        }

        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        _enableFilter = Preferences.Get("EnableFilter", false);

        if (_enableFilter && Preferences.Get("ActiveFilter", "None") != "None")
        {
            _whitelist.AddRange(newsfeedFilter.UserWhitelist);
            _blacklist.AddRange(newsfeedFilter.UserBlacklist);
        }
        else
        {
            _whitelist.Clear();
            _blacklist.Clear();
        }

        base.OnParametersSet();
    }

}