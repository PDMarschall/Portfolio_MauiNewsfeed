@using Portfolio_MauiNewsfeed.Filtering;
@using Portfolio_MauiNewsfeed.Services;
@inject NewsfeedFilter newsfeedFilter
@inject IAppDataService<NewsfeedFilter> filterService

<div class="list-group list-group-flush d-grid gap-2 border-0 w-auto dropdown_menu-7">
    @if (NewsfeedFilterCollection != null)
    {
        for (int i = 0; i < NewsfeedFilterCollection.Count(); i++)
        {
            <FilterSettingsFilterListItem Filter="NewsfeedFilterCollection[i]" ListName="FilterList" Id="@("FilterList"+i)" OnSelectFilter="SetFilter" OnDeleteFilter="DeleteFilterAsync" OnEditFilter="EditFilterAsync" />
        }
    }
    <button type="button" class="btn btn-outline-success" @onclick="AddNewFilterAsync"><i class="bi bi-plus-circle"></i></button>
</div>

@code {

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    public List<NewsfeedFilter> NewsfeedFilterCollection { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await CheckForActiveFilterAsync();
        await base.OnInitializedAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        await GetFiltersAsync();
        await base.OnParametersSetAsync();
    }

    private async Task GetFiltersAsync()
    {
        NewsfeedFilterCollection = await filterService.GetAllAsync();
    }

    private async Task CheckForActiveFilterAsync()
    {
        await GetFiltersAsync();
        string activeFilterTitle = Preferences.Get("ActiveFilter", "None");

        if (activeFilterTitle != "None")
        {
            var activeFilter = NewsfeedFilterCollection.Where(x => x.Title == activeFilterTitle).FirstOrDefault();
            if (activeFilter != null)
                newsfeedFilter.CopyFilterValues(activeFilter);
        }
    }

    private void SetFilter(NewsfeedFilter filter)
    {
        newsfeedFilter.CopyFilterValues(filter);
    }

    private async Task AddNewFilterAsync()
    {
        IModalReference filterModal = Modal.Show<FilterSettingsAddNewFilter>("Tilføj Nyt Filter");
        ModalResult result = await filterModal.Result;

        if (result.Confirmed)
        {
            NewsfeedFilter newFilter = (NewsfeedFilter)result.Data;
            await filterService.SaveAsync(newFilter);
            NewsfeedFilterCollection = await filterService.GetAllAsync();
        }
    }

    private async Task DeleteFilterAsync(NewsfeedFilter filter)
    {
        filterService.Delete(filter);
        NewsfeedFilterCollection = await filterService.GetAllAsync();
    }

    private async Task EditFilterAsync(NewsfeedFilter filter)
    {
        ModalParameters data = new ModalParameters().Add(nameof(FilterSettingsAddNewFilter.Filter), filter);
        IModalReference filterModal = Modal.Show<FilterSettingsAddNewFilter>("Rediger Filter", data);
        ModalResult result = await filterModal.Result;

        if (result.Confirmed)
        {
            NewsfeedFilter newFilter = (NewsfeedFilter)result.Data;
            await filterService.SaveAsync(newFilter);
            NewsfeedFilterCollection = await filterService.GetAllAsync();
        }
    }
}
