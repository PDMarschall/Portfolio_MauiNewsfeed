@using Portfolio_MauiNewsfeed.Filtering;
@using Portfolio_MauiNewsfeed.Services;
@inject NewsfeedFilter newsfeedFilter
@inject NewsfeedFilterService filterService

<div class="list-group list-group-flush d-grid gap-2 border-0 w-auto dropdown_menu-7">
    @if (NewsfeedFilterCollection != null)
    {
        for (int i = 0; i < NewsfeedFilterCollection.Count(); i++)
        {
            <FilterSettingsFilterListItem Filter="NewsfeedFilterCollection[i]" ListName="FilterList" Id="@("FilterList"+i)" OnSelectFilter="SetFilter" OnDeleteFilter="DeleteFilter" OnEditFilter="EditFilter" />
        }
    }
    <button type="button" class="btn btn-outline-success" @onclick="AddNewFilter">Add New Filter</button>
</div>

@code {

    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    public List<NewsfeedFilter> NewsfeedFilterCollection { get; set; }

    protected override void OnInitialized()
    {
        NewsfeedFilterCollection = filterService.GetAllNewsfeedFilters();
        string activeFilterTitle = Preferences.Get("ActiveFilter", "None");

        if (activeFilterTitle != "None")
        {
            var activeFilter = NewsfeedFilterCollection.Where(x => x.Title == activeFilterTitle).FirstOrDefault();
            if (activeFilter != null)            
                newsfeedFilter.CopyFilterValues(activeFilter);            
        }

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        NewsfeedFilterCollection = filterService.GetAllNewsfeedFilters();
        base.OnParametersSet();
    }

    public void SetFilter(NewsfeedFilter filter)
    {
        newsfeedFilter.CopyFilterValues(filter);
    }

    public async Task AddNewFilter()
    {
        IModalReference filterModal = Modal.Show<FilterSettingsAddNewFilter>("Add New Filter");
        ModalResult result = await filterModal.Result;

        if (result.Confirmed)
        {
            NewsfeedFilter newFilter = (NewsfeedFilter)result.Data;
            filterService.SaveNewsfeedFilter(newFilter);
            NewsfeedFilterCollection = filterService.GetAllNewsfeedFilters();
        }
    }

    public void DeleteFilter(NewsfeedFilter filter)
    {
        filterService.DeleteFilter(filter);
        NewsfeedFilterCollection = filterService.GetAllNewsfeedFilters();
    }

    public async Task EditFilter(NewsfeedFilter filter)
    {
        ModalParameters data = new ModalParameters().Add(nameof(FilterSettingsAddNewFilter.Filter), filter);
        IModalReference filterModal = Modal.Show<FilterSettingsAddNewFilter>("Edit Filter", data);
        ModalResult result = await filterModal.Result;

        if (result.Confirmed)
        {
            NewsfeedFilter newFilter = (NewsfeedFilter)result.Data;
            filterService.SaveNewsfeedFilter(newFilter);
            NewsfeedFilterCollection = filterService.GetAllNewsfeedFilters();
        }
    }
}
