@using Portfolio_MauiNewsfeed.Filtering;

<div>
    <EditForm EditContext="_editContext" OnValidSubmit="ValidSubmitFormAsync">
        <DataAnnotationsValidator />
        <div class="row g-3 align-items-center">
            <div>
                <div class="col-auto">
                    <label class="col-form-label" for="Title">Titel</label>
                </div>
                <div class="col-auto">
                    <InputText id="Title" class="form-control" @bind-Value="_filterInputModel.Title" placeholder="Nyt filter" disabled="@_editFilterMode"/>             
                    <ValidationMessage For="@( () => _filterInputModel.Title)" />
                </div>
            </div>
            <div>
                <div class="col-auto">
                    <label class="col-form-label" for="Whitelist">Whitelist</label>
                </div>
                <div class="col-auto">
                    <InputText id="Whitelist" class="form-control" @bind-Value="_filterInputModel.Whitelist" placeholder="Ord, ord, ord..." />
                    <ValidationMessage For="@( () => _filterInputModel.Whitelist)" />
                </div>
            </div>
            <div>
                <div class="col-auto">
                    <label class="col-form-label" for="Blacklist">Blacklist</label>
                </div>
                <div class="col-auto">
                    <InputText id="Blacklist" class="form-control" @bind-Value="_filterInputModel.Blacklist" placeholder="Ord, ord, ord..." />
                    <ValidationMessage For="@( () => _filterInputModel.Blacklist)"/>
                </div>
            </div>
        </div>
        <div class="py-3 d-flex btn-group align-self-center w-auto">
            <button type="submit" class="btn btn-outline-success"><i class="bi bi-check-circle"></i></button>
            <button @onclick="Cancel" class="btn btn-outline-danger"><i class="bi bi-x-square"></i></button>
        </div>
    </EditForm>
</div>


@code {

    private NewsfeedFilterInputModel _filterInputModel = new NewsfeedFilterInputModel();
    private EditContext _editContext;
    private bool _editFilterMode;

    [Parameter]
    public NewsfeedFilter Filter { get; set; }

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_filterInputModel);
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (Filter != null && firstRender)
        {
            CopyExistingFilterToEdit();
            SetEditFlag();
        }
        base.OnAfterRender(firstRender);
    }

    private async Task ValidSubmitFormAsync()
    {
        Filter ??= new NewsfeedFilter();
        Filter = _filterInputModel.ConvertInputModel();
        await BlazoredModal.CloseAsync(ModalResult.Ok(Filter));
    }

    private async Task Cancel() => await BlazoredModal.CancelAsync();

    private void CopyExistingFilterToEdit()
    {
        _filterInputModel.Title = Filter.Title;
        _filterInputModel.Whitelist = String.Join(", ", Filter.UserWhitelist);
        _filterInputModel.Blacklist = String.Join(", ", Filter.UserBlacklist);
    }

    private void SetEditFlag()
    {
        _editFilterMode = true;
    }
}


