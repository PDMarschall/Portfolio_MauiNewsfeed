@using Portfolio_MauiNewsfeed.Filtering;

<div class="list-group-item rounded-3 py-3 border-1 filter-item d-flex justify-content-between align-items-center @(IsActive ? "selected-filter" : "")" id="@Id">
    <div class="d-flex flex-column">
        <label class="@(IsActive ? "fw-bold" : "")" for="@Id">@Filter.Title</label>
    </div>
    <div class="btn-group align-self-center" role="group">
        <label class="btn @GetButtonClass()" @onclick="EditFilter"><i class="@(IsActive ? "bi bi-pencil" : "bi bi-pencil-fill")"></i></label>
        <label class="btn @GetButtonClass()" @onclick="DeleteFilter"><i class="@(IsActive ? "bi bi-trash" : "bi bi-trash-fill")"></i></label>
        <label class="btn @GetButtonClass()" @onclick="SelectFilter"><i class="@(IsActive ? "bi bi-toggle-on" : "bi bi-toggle-off")"></i></label>
    </div>
</div>




@code {

    [Parameter, EditorRequired]
    public string ListName { get; set; }

    [Parameter, EditorRequired]
    public string Id { get; set; }

    [Parameter]
    public NewsfeedFilter Filter { get; set; }

    public bool IsActive => this.Filter.Title == Preferences.Get("ActiveFilter", "None");

    [Parameter]
    public EventCallback<NewsfeedFilter> OnSelectFilter { get; set; }

    [Parameter]
    public EventCallback<NewsfeedFilter> OnDeleteFilter { get; set; }

    [Parameter]
    public EventCallback<NewsfeedFilter> OnEditFilter { get; set; }

    private string GetButtonClass()
    {
        return IsActive ? "btn-filter" : "btn-outline-filter";
    }

    private void SelectFilter()
    {
        if (!IsActive)
        {
            Preferences.Set("ActiveFilter", Filter.Title);
            OnSelectFilter.InvokeAsync(Filter);
        }
        else
            Preferences.Set("ActiveFilter", "None");
    }

    private void DeleteFilter()
    {
        OnDeleteFilter.InvokeAsync(Filter);
    }

    private void EditFilter()
    {
        OnEditFilter.InvokeAsync(Filter);
    }
}
