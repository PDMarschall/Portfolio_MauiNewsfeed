@using System.ServiceModel.Syndication;
@using System.Xml;
@using System.Collections.ObjectModel;
@inject NavigationManager navigationManager
<p class="text-danger font-weight-bold">@_errorMessage</p>
<br />
@if (_feed != null)
{
    if (Blacklist.Count() > 0 || Whitelist.Count() > 0)
    {
        foreach (SyndicationItem item in _filteredFeed.Items)
        {
            <NewsfeedItem Title="@item.Title.Text" Description="@item.Summary.Text" Link="@item.Links.FirstOrDefault().Uri.ToString()" PublicationDate="@item.PublishDate" />
        }
    }
    else
    {
        foreach (SyndicationItem item in _feed.Items)
        {
            <NewsfeedItem Title="@item.Title.Text" Description="@item.Summary.Text" Link="@item.Links.FirstOrDefault().Uri.ToString()" PublicationDate="@item.PublishDate" />
        }
    }
}
<br />
@code {

    [Parameter]
    public string FeedUrl { get; set; }

    [Parameter]
    public bool IsFiltered { get; set; }

    [Parameter]
    public List<string> Whitelist { get; set; }

    [Parameter]
    public List<string> Blacklist { get; set; }

    private SyndicationFeed _feed;
    private SyndicationFeed _filteredFeed;
    private string _errorMessage;

    protected override Task OnParametersSetAsync()
    {
        Whitelist ??= new List<string>();
        Blacklist ??= new List<string>();

        LoadFeed();

        if (_feed != null)
        {
            InitializeNullEntries();

            if (IsFiltered)
                ApplyFilter();
        }

        return base.OnParametersSetAsync();
    }

    public void LoadFeed()
    {
        try
        {
            XmlReader reader = XmlReader.Create(FeedUrl);
            _feed = SyndicationFeed.Load(reader);
        }
        catch (Exception e)
        {
            _errorMessage = $"There was a problem loading the feed: {e.Message}.";
        }
    }

    public void InitializeNullEntries()
    {
        foreach (SyndicationItem item in _feed.Items)
        {
            item.Summary ??= new TextSyndicationContent("");            
        }
    }

    public void ApplyFilter()
    {
        if (Whitelist.Any() || Blacklist.Any())
        {
            _filteredFeed = _feed;
            _filteredFeed.Items = _feed.Items.Where(x =>
                (!Whitelist.Any()
                ||
                Whitelist.Any(searchTerm => x.Title.Text.ToLower().Contains(searchTerm.ToLower())))
                &&
                (!Blacklist.Any()
                ||
                Blacklist.Any(searchTerm => !x.Title.Text.ToLower().Contains(searchTerm.ToLower()))));
        }
    }
}
